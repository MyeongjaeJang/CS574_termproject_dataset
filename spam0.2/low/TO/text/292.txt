#rest #api #security 
TL;DR: Don't leak information through HTTP error codes. 
Here is a possible vulnerability that is probably not very serious but easy to overlook. Suppose we get hired to redo a local bank's website. Being the hip coders that we are, we decide to make a nice RESTful API. 
One of our API's operations is the following: GET /api/accounts/{acctId} 
Of course, this operation succeeds only if an account with ID acctID exists and the request contains valid credentials for the customer that owns that account. If one of these conditions does not hold, we return an appropriate HTTP error code. 
What should that error code be? We know that RESTful APIs return the most appropriate status code for the situation. So, it seems to make sense to return 404 when the account doesn't exist, and 401 when it does but the user is unauthenticated or isn't its owner. 
But this may well be a bad idea, because an unauthenticated user can now do something like this: $ for i in `seq 300 305`; do curl -sI https://exammple.com/api/accounts/${i} | head -n 1; done HTTP/1.1 404 Not Found HTTP/1.1 401 Unauthorized HTTP/1.1 401 Unauthorized HTTP/1.1 404 Not Found HTTP/1.1 401 Unauthorized HTTP/1.1 404 Not Found 
This unauthenticated user has now learned something: that there are no accounts with IDs 300, 303, and 305, but there are with IDs 301, 302, and 304. And of course running this command with a wider range of IDs would reveal even more information. 
How bad is this? That depends on a lot of other things; at this point, the most we can say is that it is not obviously terrible. But still, this could be used to learn other things --- for example, the rate at which new accounts are created, which might be interesting to a competitor. 
The important point is that this API leaks information to users that have no legitimate reason to have it. And it is easy to fix: we should just return 404 even if the account does in fact exist. Conclusion 
While we focus on the obvious security concerns --- keeping account balances secret, preventing unauthorized transactions --- it is easy to overlook how the behavior of our system leaks sensitive information. 
An attacker's goal is to gain information about the state of our system by observing its behavior. So our job is to make sure that the system behaves (from the attacker's point of view) identically regardless of its state. And remember: unauthenticated users are not the only potential attackers. Even logged-in customers should get 404 in response to requests for accounts that they don't own. Did you find this post useful? Show some love! 